https://www.javatpoint.com/git-cheat-sheet

git config --global user.name "User Name" 	#to set user name
git config --global user.email "user@email.com" #to set user email
git config --global --list			#to show active global config settings

git init       					#Create a directory in local & run this command to initialize a new, empty repository
git init --bare .				#to initialize Bare Git Repository
git remote add <remote name> <remote url>/usr/  #to add remote repository.Create an entry in your git config
git remote rm <remote name>			#to remove remote repository.
git remote -v					#to list remote url
git clone <remote url>/usr/ "Local_folder"	#to clone remote repository to our local directory.
git clone -b master <remote url>/usr/ "Local_folder"		#to clone a particular branch of remote repository to our local directory.

git pull <remote name>				#to pull from remote repository

git checkout filename				#It will undo the changes made to filename 
git checkout .					#to undo changes made in all file in working tree.

git checkout branch_name			#to switch branch.
git checkout -b branch_name			#create a branch and switch to new branch.
git merge feature_branch_name			#checkout to branch where you want to merge the feature branch
git merge --abort				#returning back to the state before merging began

git branch branch_name				#to create local branch
git branch					#to list the the local branch
git branch -r					#to list remote branch
git branch -a					#to list all branches (local and remote)
git branch --merged				#to list all merged branch
git branch --no-merged				#to list all unmerged branch
git branch -d branch_name			#to delete certain branch

git fetch <remote name>				#to fetch all the branches from the the remote repo
git fetch <remote name> <branch>		#to fetch only the specified branch

git status					#to show changes(in red) made in Working Directory.
git ls-files					#to list modified files + staged files
git ls-files -s					#to list staged files
git ls-files -m					#to list modified files
git add file_name				#to add file to staging Index
git add --all					#to add all the modified files to staging Index
git commit -m "message"				#to add all the files from staging index to commit history where a permanent snapshot persists 
git commit -a					#to commit directly 
git commit --amend				#to amend the last commit message 

git ls-tree -r HEAD dir				#List the contents of a tree object, same as ls -lrt. only works with git refs

git diff-tree -r SHA-1_value			#List files that changed during a commit

git rm file_name	    			#deleting from the working tree and staging area
git rm -f file_name	    			#forcefully
git rm --cached file_name   			#only deleting from staging area
git rm -r folder_name       			#recursively delete sub folder & files
git rm folder_name --dry-run	    		#to see which files would be removed. Not actually delete the files 

git revert <hash-or-ref> or git revert HEAD~2	#revert back to previous commit by creating a new commit of previous <ref or hash>

git reset file_name				#It will reset the changes in staging area & Commit history
git reset <hash-or-ref>				#to reset master pointing
git reset or git reset --mixed HEAD 		#the working tree is left untouched. all changes reverted from staging index & local repository.
git reset --hard HEAD				#all changes are reverted from all three trees.Pending work will lost in working tree & staging index.s
git reset --hard HEAD~1
git reset --hard HEAD~2
git reset --soft HEAD				#The Staging area and the Working Directory are left untouched.

git stash					#to store modified & staged file temporarily
git stash list					#to get list of stashes
git stash apply stash@{n}
git stash pop stash@{n}
git stash drop stash@{n}			#to remove all the stashed item

git diff					#To track the changes that have not been staged since the last commit.
git diff --staged				#To track the changes that have staged but not committed
git diff HEAD					#To track the changes after committing a file.
git diff <commit1-sha> <commit2-sha> 		#To track changes between two commits
git diff <branch 1>..< branch 2>  		#To track changes between two branches

git reflog --help
git reflog show <hash-or-ref>
git reflog expire <hash-or-ref>
git reflog delete <hash-or-ref>
git reflog exists <hash-or-ref>

git bisect start
git bisect bad                 		# Current version is bad
git bisect good <commit1-sha>    		# v2.6.13-rc2 is known to be good

git log						#to view previous commits
git log -p					#work similar as git diff
git log --oneline
git log --merge					#Print only merge commits
git log -n 2



# git pull (or git fetch + git merge)
