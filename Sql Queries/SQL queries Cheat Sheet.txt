#DQL
SELECT - To query data from one table or multiple(==inner join) table. SELECT statement is very complex that can consists of WHERE, GROUP BY, HAVING, JOIN, ORDER BY, LIMIT (FETCH)
ORDER BY - To sorting data in ascending & descending order. default ordering is ASC. last clause in a SELECT statement. To place NULL values after the non-NULL values use NULLS LAST.
DISTINCT  – To filter duplicate rows from the result set of SELECT statement.
WHERE –  To filter the result set of SELECT statement by putting search condition for rows.
AND – Return output when both contions satisfy.
OR –  Return output when any one contions satisfy.
FETCH – To limit the number of output rows in oracle. (LIMIT 5 == FETCH NEXT 5 ROWS ONLY)
IN – To compare value in a list or a subquery.
BETWEEN – To filter data based on a range of values.
LIKE  – To test whether values in a column match a specified pattern. Percentage(%) - any string of zero or more character. _ (underscore) - any single character
IS NULL and IS NOT NULL – check if an expression or values in a column is NULL or not.
GROUP BY - To group rows into a set of summary rows by values of columns or expressions. Often used with aggregate functions such as COUNT(), MAX(), MIN(), AVG() and SUM()
HAVING - To used with aggregate functions to filter result set of select statement. HAVING clause filters groups of rows while the WHERE clause filters rows.
subquery - A subquery is a SELECT statement nested inside another statement such as SELECT, INSERT, UPDATE, or DELETE.
EXISTS - The result of EXISTS is a boolean value True or False. It can be used in a SELECT, UPDATE, INSERT or DELETE statement. Give result set if EXISTS give True.
NOT EXIST - The result of NOT EXISTS is a boolean value True or False. It can be used in a SELECT, UPDATE, INSERT or DELETE statement. Give result set if NOT EXISTS give False.
ANY | SOME - To compare a value to list of values or result set of subquery. Must be preceded by a comparison operator such as =, !=, >, >=,<, <=. OR replacment for multiple comparison.
ALL - To compare a value to list of values or result set of subquery. Must be preceded by a comparison operator such as =, !=, >, >=,<, <=. AND replacment for multiple comparison.

#JOIN's
JOIN - To combine rows from two or more tables, based on a related column between them. NULL value is used as output if there is no match.
ON - To specify a join condition. SELECT * FROM T1 INNER JOIN T2 ON T1.C1=T2.C1;
USING - To specify a join condition. SELECT * FROM T1 INNER JOIN T2 USING( c1, c2, ... ); #C1 C2 must be present in both tables 
INNER JOIN - To return only those rows where the join condition is satisfied. Common rows only.
LEFT JOIN - To return those rows where the join condition is satisfied plus non-satisfying rows from left table.
RIGHT JOIN - To return those rows where the join condition is satisfied plus non-satisfying rows from right table.
FULL OUTER JOIN - It's similar to union of left join and right join.
CROSS JOIN - To generate a paired combination of each row of the first table with each row of the second table. Also known as cartesian join. SELECT C1, C2 FROM T1 CROSS JOIN T2;
NATURAL JOIN - Join(INNER join, a LEFT OUTER join, or a RIGHT OUTER join) based on the common columns in the two tables being joined. The default is INNER join. ON clause not used.

#SET
UNION - To combines result sets of two or more SELECT statements into a single result set. Data type and number of column should be same. It returns the unique rows from both result sets.
UNION ALL - To retain duplicate rows use UNION ALL.
INTERSECT - To retrieve the data which is common in both tables. 
MINUS - To retrieve the data from one table which is not available in another table.

#DML
INSERT INTO – To insert data into a table. INSERT INTO table_name (column_list) VALUES (value_list);
INSERT INTO SELECT – To insert data into a table from the result of a query. INSERT INTO target_table (col1, col2, col3) SELECT col1,col2,col3 FROM source_table WHERE condition;
INSERT ALL INTO – To insert multiple rows into multiple tables. WHEN THEN can be used with SELECT result set for conitional insert.
UPDATE SET– To changes existing values in a table. UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;
DELETE FROM– To delete one or more row from a table. DELETE FROM table_name WHERE condition;
MERGE INTO USING– TO perform insertion, update, and deletion using a single statement. MERGE INTO target_table USING source_table ON search_condition WHEN MATCHED THEN UPDATE SET.. WHEN 		  NOT MATCHED THEN INSERT (..) VALUES (..)
#DDL
CREATE TABLE - To create a new table. CREATE TABLE schema_name.table_name ( col1 data_type column_constraint, col2 data_type column_constraint, ..., table_constraint);
IDENTITY - column constraint to generate unqiue number to the column, . Types : GENERATED ALWAYS AS IDENTITY, GENERATED BY DEFAULT AS IDENTITY, GENERATED ALWAYS AS IDENTITY START WITH 10,
	   GENERATED ALWAYS AS IDENTITY START WITH 10 INCREMENT BY 10.
ALTER TABLE ADD - To add new columns. ALTER TABLE table_name ADD (col1 data_type column_constraint, col2 data_type column_constraint, ...);
ALTER TABLE MODIFY - To modify attributes of exixting columns. ALTER TABLE table_name MODIFY (col1 data_type column_constraint, col2 data_type column_constraint, ...);
ALTER TABLE RENAME TO - To rename table. ALTER TABLE table_name RENAME TO new_table_name;
ALTER TABLE RENAME COLUMN TO - To rename column. ALTER TABLE table_name RENAME COLUMN old_name TO new_name;
ALTER TABLE SET UNUSED COLUMN - To make column no longer visible for accessing before dropping it. ALTER TABLE table_name SET UNUSED COLUMN column_name;
ALTER TABLE DROP UNUSED COLUMNS - To drop column after setting column as unused. ALTER TABLE table_name DROP UNUSED COLUMNS;
DROP TABLE - To drop table from database. DROP TABLE table_name [CASCADE CONSTRAINTS | PURGE]; PURGE to release the space associated with it at once. CASCADE CONSTRAINTS to remove all 	     referential integrityconstraints.
TRUNCATE - To delete all data from a table faster and more efficiently. TRUNCATE TABLE table_name CASCADE;
RENAME - To rename table + Oracle automatically update indexes, constraints, and grants on the old table to the new one. Only in Oracle sql

#DATATYPE
NUMBER(p,s) - To store numeric values. Precision is the number of digits in a number. It ranges from 1 to 38. Scale is the number of digits to the right of the decimal point.It ranges from 	      -84 to 127. Number 1234.56 has a precision of 6 and a scale of 2.
FLOAT(p) -  Subtype of the NUMBER data type. You cannot specify the scale its by default 126
CHAR(length BYTE) or CHAR(length CHAR) - To store fixed-length character(ASCII) strings. max 2000 bytes. LENGHTB() & LENGHTC()
NCHAR(length BYTE) - To store fixed-length Unicode character data. max 2000 bytes. NCHAR column can store 1000 characters for 2 bytes or 2000 charater for 1 bytes.
VARCHAR2 - To store variable-length character strings. max 4000 bytes.
NVARCHAR2 - To store variable-length Unicode character string. Can store any characters.
DATE - To store date & time with a precision of one second. TO_DATE() function is used to insert date & TO_CHAR() function to format the dates.
       Date format is controlled by the value of NLS_DATE_FORMAT parameter.
TIMESTAMP(fractional_seconds_precision) - In addition to date time it stores the fractional seconds, which is not stored by the DATE data type. Its default is 6 and max 9.
TIMESTAMP(fractional_seconds_precision) WITH TIME ZONE - it include timezone details as well. In postgres it is timestamptz data type.
INTERVAL - To store periods of time. INTERVAL YEAR TO MONTH – stores intervals using of year and month.. 
           INTERVAL DAY TO SECOND – stores intervals using days, hours, minutes, and seconds including fractional seconds.

#CONSTRAINT

NOT NULL - Ensures that a column cannot have a NULL value. column_name data_type NOT NULL
UNIQUE - Ensures that all values in a column are different. column_name data_type UNIQUE
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table. Table constraint. PRIMARY KEY (col1, col2,...)
FOREIGN KEY - Uniquely identifies a row/record in another table. Table constraint. FOREIGN KEY(col1, col2,...) REFERENCES parent_table(col1,col2)
CHECK - Ensures that all values in a column satisfies a specific condition. column_name data_type CHECK (expression)
DEFAULT - Sets a default value for a column when no value is specified. column_name data_type DEFAULT 'Specified_value'